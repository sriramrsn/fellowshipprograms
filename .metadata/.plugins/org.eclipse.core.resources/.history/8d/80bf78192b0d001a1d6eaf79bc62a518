package com.bridgelabz.fellowshipprograms.utility;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.Scanner;
import java.util.regex.Matcher;

public class Utility {
	public static Scanner sc= new Scanner(System.in);
	
	/**
	 * purpose-These function reads the integer from the command line
	 * @return integer value
	 */
	public static int readInt()
	{
		return sc.nextInt();
	}
	public static String readLine()
	{
		return sc.nextLine();
	}

/*------------------------------Basic_cores-----------------------------------------------*/

	/**
	 * purpose-Count the number of heads and tails by providing the number of times coin tossed on the basis.
	 * @param number of times coin tossed.
	 * @return -array -number of heads count and tails count.
	 */
	public static int[] flipCoin(int n)
	{
		int[] count = new int[2];
		for(int i=0;i<n;i++)
		{
			double d=Math.random();
			if(d<0.5)
			{
				count[0]++;
			}
			else
			{
				count[1]++;
			}
		}
		return count;
	}
	

//-----------------------------------------------------------------------------------

	/**
	 * purpose-To check weather the year is leap year or not by providing year as a input.
	 * @param year.
	 * @return-boolean if it return true then it is leap year otherwise not-leap year.
	 */
	public static boolean leapYear(int n)
	{
		boolean leap=false;
		if(n%4==0)
		{
			if(n%100==0)
			{
				if(n%400==0)
				{ 
					return leap=true;
				}
				else return leap=false;
			} else return leap=true;
		}else 
		return false;
	}


//-----------------------------------------------------------------------------------
	
	/**
	 * purpose- prints a table of the powers of 2 that are less than or equal to 2^N.
	 * @param n is the power to the 2.
	 */
	public static void power2(int n)
	{
		//it will check the input is greater than or equals to zero and it is less than 31.
		if(n>=0 && n <31)
		{
			double temp= Math.pow(2, n);
		System.out.println("power "+temp);
		for(int i=1;i<=n;i++)
		{
			double temp1 = 2*i;
			if(temp1>temp)
			{
				System.out.println(""+temp1);
				break;
			}
			else 
			{ 
				System.out.println(""+temp1);
				continue;
			}
		}
		}	
	}
	

//-----------------------------------------------------------------------------------

	
	/**
	 * purpose-These method calculate the Nth harmonic number by providing the 'n' value at that range will calculated .
	 * @param It is integer value which we want calculate the harmonic of at that range.
	 * @return- sum - which is the harmonic number of 'n'.
	 */
	public static double harmonic(int n)
	{
		double temp,sum=0;
		for(int i=1;i<=n;i++)
		{
			temp=1/(double)i;
			sum=sum+temp;
		}
		return sum;
	}


//-----------------------------------------------------------------------------------
	
	/**
	 * purpose-These method check and display the prime factors of decimal number.
	 * @param n-decimal number.
	 */
	public static void primeFactors(int n) 
    { 
        while (n%2==0) 
        { 
            System.out.print(2 + " "); 
            n = n/2; 
        } 
  
        for (int i = 3; i <= Math.sqrt(n); i=i+2) 
        { 
            while (n%i == 0) 
            { 
                System.out.print(i + " "); 
                n = n/i; 
            } 
        }
           if (n > 2) 
            System.out.print(n); 
    } 


/*----------------------------------functional-----------------------------------------*/

	
	
	/**
	 * purpose- multiplex of 2D arrary of integers which takes m*n matrix and multiply both m*n matrix and x*y matrix to form m*x matrix of integer values. 
	 * @param array of matrix 'a'.
	 * @param array of matrix 'b'
	 * @param number of rows 'm'
	 * @param number of columns 'n'
	 */
 	public static void multiplexInteger(Integer[][] a,Integer[][] b, int m,int n)
	{
		int sum,i,j,k;
		Integer x[][]=new Integer[m][n];
		for(i=0;i<m;i++)
		{
			
			for(j=0;j<n;j++)
			{	sum=0;
				for(k=0;k<m;k++)
				{
				sum=sum+a[i][k]*b[k][j];
			}
				x[i][j]=sum;
		}
		}
		print2Darray(x,m,n);
	}
	
	/**
	 * purpose- multiplex of 2D arrary of integer which takes m*n matrix and multiply both m*n matrix and x*y matrix to form m*x matrix of Double values. 
	 * @param array of matrix 'a'.
	 * @param array of matrix 'b'
	 * @param number of rows 'm'
	 * @param number of columns 'n'
	 */
	public static void multiplexDouble(Integer [][] a,Integer [][] b, int m,int n)
	{
		int i,j,k;
		double sum;
		Double x[][]=new Double[m][n];
		for(i=0;i<m;i++)
		{
			
			for(j=0;j<n;j++)
			{	sum=0.0;
				for(k=0;k<m;k++)
				{
				sum=sum+a[i][k]*a[k][j];
			}
				x[i][j]=sum;
		}
		}
		print2Darray(x,m,n);
	}

	/**
	 * purpose- print the m*n matrix.
	 * @param <T>
	 * @param array 'a'.
	 * @param number of rows 'm'.
	 * @param number of columns 'n'.
	 */
	public static <T> void print2Darray(T a[][],int m,int n)
	{
		int i,j;
			for(i=0;i<m;i++)
			{
				for(j=0;j<n;j++)
				{
					System.out.println(a[i][j]);
				}
			}
	}

//-----------------------------------------------------------------------------------

	/**
	 * purpose-calculate euclidean distance from the point (x, y) to the origin (0, 0). 
	 * @param a distance from x-coordinate.
	 * @param b distance from y-coordinate.
	 * @return-eclidean distance.
	 */
	public static double euclideDistance(double a,double b)
	{
		double temp=a*a+b*b;
		double d= Math.sqrt(temp);
		return d;
	}

//-----------------------------------------------------------------------------------

	/**
	 * purpose these method calculate the delta of Quadratic equation 'x*x+x+c=0'.
	 * @param a be the x^2.
	 * @param b be the x.
	 * @param c be the c(constant).
	 * @return delta b*b-4*a*c
	 */
	public static double delta(double a,double b,double c)
	{
		double delta =b*b-4*a*c;
		return delta;
	}
	/**
	 * purpose these method calculate the delta of Quadratic equation 'x*x+x+c=0'.
	 * @param a be the x^2.
	 * @param b be the x.
	 * @param c be the c(constant).
	 * @return root1 (-b+srt)/2*a.
	 */
	public static double root1 (double a,double b,double srt)
	{
		double root1= (-b+srt)/2*a;
		return root1;
	}
	/**
	 * purpose these method calculate the delta of Quadratic equation 'x*x+x+c=0'.
	 * @param a be the x^2.
	 * @param b be the x.
	 * @param c be the c(constant).
	 * @return root1 (-b-srt)/2*a.
	 */
	public static double root2 (double a,double b,double srt)
	{
		double root2= (-b-srt)/2*a;
		return root2;
	}

//-----------------------------------------------------------------------------------

	/**
	 * purpose- calculate effective temperature.
	 * @param t-temperature.
	 * @param v-wind speed.
	 * @return Effective temperature( w = 35.74 + 0.6215*t + (0.4275*t - 35.75)  *  v ^ 0.16).
	 */
	public static double windChill(double t,double v)
	{
			double temp1 = 0.6215*t;
			double temp2 = 0.4275*t;
			double temp3 = temp2+35.75;
			double temp4 = Math.pow(v, 0.16);
			double w= 35.74+temp1+temp3*temp4;
			return w;	
	}

	
/*----------------------------Logical-----------------------------------------------*/
	
public static int coupongenerate(int n)
{
	int temp=(int)( Math.random()*n);
	return temp;
}
public static int generatedCoupon(int n)
{
	int count=0,i=0;
	int distinct=0;
	boolean collect[]=new boolean[n];
	 while(distinct<n)
	 {
		 int v=coupongenerate(n);
		 count++;
		 if(!collect[v])
		 {
			 distinct++;
			 System.out.println("distinct coupon :"+v);
			 collect[v]=true;
		 }
		/* while(i<n)
		 {
			 System.out.println(collect[i]);
			 i++;
		 }*/
	 }
	return count;
}




/*public static void run()
{
	System.out.println("stop to stopwatch press enter");
	System.out.println();
	for(int i=1;i<=minute*60;i++)
	{
		if(continueStopWatch)
		{
			try {
				Thread.sleep(1000);
				System.out.println(""+Thread.currentThread().getName()+""+i););
			}catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}else
		{
			System.out.println(Thread.currentThread().getName()+"End");
			break;
		}
	}
}
*/




/*----------------------------Algoritham-----------------------------------------------*/
	
	
	/**
	 * purpose of these method is to get how many combination of single string have. 
	 * @param string at initial position of letter.
	 * @param remaining string letters.
	 */
	public static void permutatioRecursive(String initial,String remaining)
	{
		if(remaining.length()==0)
		{
			System.out.println(initial);
		}
		else
		{
			for(int i=0;i<remaining.length();i++)
			{
				String str1= initial+remaining.charAt(i);
				String str2= remaining.substring(0, i)+remaining.substring(i+1);
				permutatioRecursive(str1,str2);
			}
			
		}
	}
	

//-----------------------------------------------------------------------------------

	
	/**
	 * purpose-These method first checks the file is empty or not after if it empty it fill the data in the form of array.
	 * @param filename would be filename.txt format.
	 * @param data be the list of strings which we separated by commas.
	 * @return file of array.
	 */
	public static String[] createFile(String filename,String data)
	{
		File myfile = new File(filename);
		String words[]=null;
		try {
				boolean createFile = myfile.createNewFile();
				if(createFile)
				{
					System.out.println("New File Successfully created");
				}else {
				
					
					FileWriter fw = new FileWriter("file.txt");
					fw.write(data);
					
					fw.close();
					
		
					FileReader fr = new FileReader(filename);
				
					BufferedReader br =  new BufferedReader(fr);
					
				
					String s;
				
				
					while((s=br.readLine())!=null)
					{
						words=s.split(",");
					}
					br.close();
				}
		}catch (Exception e)
		{
		
		}
		return words;
	}
	

//-------------------------------------------------------------------------------------
	
	/**
	 * purpose print the list of elements in the array. 
	 * @param array to pass.
	 */
	public static void printStringArray(String a[])
	{
		for(int i=0;i<a.length;i++)
		{
			System.out.println(a[i]);
		}
	}

	
//-------------------------------------------------------------------------------------
	/**
	 * purpose sorting the list of strings in the string array.
	 * @param <T>
	 * @param array of list of strings.
	 * @return sorted array list.
	 */
	public static <T extends Comparable<T>> T[] bubbleSortGenerics(T[] arr)
	 {
		 int i,j;
		T temp;	
			for(i=0;i<arr.length-1;i++)
			{
				for(j=i+1;j<arr.length;j++)
				{
					//In hear string at i position will compare with string at j position.
					if(arr[i].compareTo(arr[j])>=0)
					{
						temp=arr[i];
						arr[i]=arr[j];
						arr[j]=temp;
					}
				}
			}
		 return arr;
	 }

	
//-------------------------------------------------------------------------------------

	/**
	 * purpose in there the data which we want find we have to search from the list of array by passing the string or value.
	 * @param <T>
	 * @param array of lists to pass.
	 * @param low initial position of array length.
	 * @param high final position of array length.
	 * @param key searching element.
	 * @return
	 */
	public static <T extends Comparable<T>> int binarySearchGenerics(T arr[], int low, int high, T key) 
	 { 
	     if (high >= low) { 
	         
	     	int mid = low + (high - low) / 2; 
	        
	     	if (arr[mid].compareTo(key)==0) 
	             return mid; 
	         
	     	if (arr[mid].compareTo(key)>0) 
	             return binarySearchGenerics(arr, low, mid - 1, key); 
	         
	     	return binarySearchGenerics(arr, mid + 1, high, key); 
	     } 

	     return -1; 
	 } 
	
	
//-------------------------------------------------------------------------------------

	/**
	 * purpose-sorting of integer values from array list in there the data is arrange in ascending order.
	 * @param a-array of elements.
	 * @return-sorted array.
	 */
	public static int[] insertionSortInteger(int[] a)
	{
		int temp;
		for(int i=1;i<a.length;i++)
		{
			temp=a[i];
			int j= i-1;
			while(j>=0 && a[j]>temp)
			{
				a[j+1]=a[j];
				j=j-1;
			}
			a[j+1]=temp;		
		}
		
		return a;
	}

	/**
	 * purpose-sorting of strings in the string array in there the alphabets are arrange in alphabetic order (A,B,C,D....).
	 * @param list of strings in array.
	 * @return sorted order list of strings in array.
	 */
	public static String[] insertionSortString(String[] a)
	{
		int i,j;
		String temp="";
		for(i=0;i<a.length;i++)
		{
			for(j=i+1;j<a.length;j++)
			{
				if(a[i].compareToIgnoreCase(a[j])>0);
				{
					temp=a[i];
					a[i]=a[j];
					a[j]=temp;
				}
			}
		}
		return a;
	}

//-----------------------------------------------------------------------------------

	/**
	 * purpose-binarySearchInteger in there the integer value is search from the list of integers in the array.
	 * @param array to pass.
	 * @param element to be search from the list
	 * @return result it is found or not in the list of array.
	 */
	public static int binarySearchInteger(int [] a,int search)
	{
		int l=0,h=a.length-1;
		while(l<=h)
		{
			int mid=(l+h)/2;
			if(a[mid]==search)
			{
				return 0;
			}
			else if(a[mid]<search)
			{
				l=mid+1;	
			}
			else {
				h=mid-1;
			}
		}
		return 1;
	}

//---
/**
 * @purpose-Bubble sort in there the integer data is arrange in ascending order. 
 * @param list of element to pass.
 * @return-sorted list of array is form.
 */
public static int[] bubbleSortInteger(int[] a)
{
	int temp;
	for(int i=0;i<a.length-1;i++)
	{
		for(int j=0;j<a.length-i-1;j++)
		{
			if(a[j]>a[j+1])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
			}
		}
	}
	return a;
}


/**
 * purpose bubble sort string in there the list of strings are arrange in alphabetic order.
 * @param list of strings array.
 * @return sorted string arrary.
 */
public static String[] bubbleSortString(String[] a)
{
	
	int i,j;
	String temp;
	for(i=0;i<a.length;i++)
	{
		for(j=i+1;j<a.length; j++) 
		{
			if(a[i].compareTo(a[j])<0)
			{
				temp=a[i];
				a[i]=a[j];
				a[j]=temp;
			}
		}
	}
	return a;
}


//-----------------------------------------------------------------------------------


/**
 * @param lists of numbers in the array.
 * @param initial position of array length. 
 * @param last position of array length.
 */
public static void mergeSort(int[] a,int lo,int hi)
{
	if(lo<hi)
	{
		int m= (lo+hi)/2;
		mergeSort(a,lo,m);
		mergeSort(a,m+1 ,hi);
		merge(a,lo,m,hi);
	}
}
public static void merge(int[]a,int lo,int m,int hi)
{
	int a1=m-lo+1;
	int a2=hi-m;
	int x[] =new int[a1];
	int y[]=new int[a2];
	for(int i=0;i<a1;i++)
	{
		x[i]=a[lo+i];
	}
	for(int j=0;j<a2;j++)
	{
		y[j]=a[m+1+j];
	}
	int i=0,j=0,k=lo;
	while(i<a1 && j<a2)
	{
		if(x[i]<=y[j])
		{
			a[k]=x[i];
			i++;
		}else
		{
			a[k]=y[j];
			j++;
		}
		k++;
	}
	while(i<a1)
	{
		a[k]= x[i];
		i++;
		k++;
	}
	while(j<a2)
	{
		a[k]=y[j];
		j++;
		k++;
	}
	
}


/**
 * purpose merge the sorted strings in the array format.
 * @param str strings of array.
 * @param low initial position on the array.
 * @param mid middle position on the array.
 * @param high last position on the array.
 * @return
 */
public static String[] mergeString(String str[],int low,int mid,int high)
{
	int size_of_lowstr=(mid-low)+1;
	int size_of_highstr=high-mid;
	
	String lowstr[]= new String[size_of_lowstr];
	String highstr[] = new String[size_of_highstr];
	int i,j,k;
	
	for(i=0;i<size_of_lowstr;i++)
	{
		lowstr[i]=str[low+i];
	}
	
	for(j=0;j<size_of_highstr;j++)
	{
		highstr[j]=str[(mid+1)+j];
	}
	
	i=0;
	j=0;
	k=low;
	
	while(i<size_of_lowstr && j<size_of_highstr)
	{
		if(lowstr[i].compareTo(highstr[j])<=0)
		{
			str[k]=lowstr[i];
			i++;
		}else {
			str[k]=highstr[j];
			j++;
		}
		k++;
	}
	
	while(i<size_of_lowstr)
	{
		str[k]=lowstr[i];
		i++;
		k++;
	}
	
	while(j<size_of_highstr)
	{
		str[k]=highstr[j];
				j++;
		k++;
	}
	return str;
}
public static String[] mergeSortString(String str[],int low,int high)
{
	if(low<high)
	{
	int mid = (low + (high-1))/2;
	
	str=mergeSortString(str, low, mid-1);
	str=mergeSortString(str, mid+1, high);
	str=mergeString(str, low, mid, high);
	}
	return str;
}

//-----------------------------------------------------------------------------------

/**
 * purpose-In these method the number which we enter is prime or not it will checks.
 * @param number which we want check.
 * @return boolean value if it prime it returns true else false.
 */
public static boolean primeCheck(int n)
{
	boolean check=true;
	if(n<2)
	{
		check=false;
	}
	else
	{
		int i=2;
		while(i<=Math.sqrt(n))
		{
			if(n%i==0)
			{
				check=false;
				break;
			}
			i++;
		}
	}
	return check;
}


//-----------------------------------------------------------------------------------


/**
 * purpose of this method is to checks the two strings have equal length and similar alphabets in them if then the two strings are anagram.
 * @param string of first.
 * @param string of second
 * @return boolean if true it is anagram else not anagram. 
 */
public static boolean anagram(String str1,String str2)
{
	  if (str1.length() != str2.length())  
	    {  
	        return false;  
	    }   
	    int value = 0;  
	    for (int i = 0; i < str1.length(); i++)  
	    {  
	        value = value ^ (int) str1.charAt(i);  
	        value = value ^ (int) str2.charAt(i);  
	    }  
	    return value == 0;  	
}


//-----------------------------------------------------------------------------------


/**
 * purpose-generate prime number.
 * @param n is the range from 1-1000 between.
 * @return prime numbers 1-n between.
 */
public static int[] primeSeries(int n)
{
	int i,j,k;
	int []a=new int[168];
	int m=0;
	for(i=1;i<=n;i++)
	{
		k=0;
		for(j=i;j>=1;j--)
		{
			if(i%j==0)
			{
				k++;
			}
		}
		if(k==2)
		{
			a[m]=i;
			m++;
		}
	}
	return a;
}



//-----------------------------------------------------------------------------------

/**
 * purpose-find the anagram from prime numbers range 1-1000
 * @param array of prime numbers
 * @return anagrams of prime numbers.
 */
public static String[] primeAnagram(int[] a)
{
	int i,j,k=0;
	String s[]=new String[168];
	for(i=0;i<a.length;i++)
	{
		for(j=i+1;j<a.length;j++)
		{
			String str1=Integer.toString(a[i]);
			String str2=Integer.toString(a[j]);
			char[] s1=str1.toCharArray();
			char[] s2=str2.toCharArray();
			Arrays.sort(s1);
			Arrays.sort(s2);
			String x =new String(s1);
			String y=new String(s2);
			 
			if(x.compareTo(y)==0)
			{
				 s[k]= a[i]+"  anagram   "+a[j];
				 k++;
			}
			
		}
	
	}
return s;
}


//------------------------------------------------------------------------------

/**
 * purpose-find the palindrome from prime numbers range 1-1000
 * @param array of prime numbers
 * @return palindrome of prime numbers.
 */
public static String[] primePalindrome(int a[])
{
	String str[]=new String[168];
	int i,temp,sum=0;
	int k=0;
	for(i=0;i<a.length;i++)
	{
	int check=a[i];
	sum=0;
	while(check>0)
	{
		temp=check%10;
		sum=sum*10+temp;
		check=check/10;
		}
	if(a[i]==sum)
		{
		str[k++]=a[i]+ "  palindrome ";
		}
	}
 return str;
}


//------------------------------------------------------------------------------
	

/**
 * purpose of these method is the enter string is in the proper format in there any special character or numbers in them.
 * @param string 
 * @return boolean if true or false
 */
public static boolean isString(String str)
{
	return ((!str.equals("")) && (str!=null) && (str.matches("^[a-zA-Z ]*$")));
} 

/**
 * purpose the enter string is in the form of numbers or not it will check.
 * @param string of numbers
 * @return boolean 
 */
public static boolean isMobileNumber(String str)
{
	return (str.matches("\\d{10}"));
}

/**
 * purpose these method replace the <name> to <first><middle><last> name format and etc.
 * @param mat string where to replace position.
 * @param str string.
 * @return string.
 */
public static String replaceString(Matcher mat,String str)
{
	String str1="";
	while(mat.find())
	{
		str1=mat.replaceFirst(str);
	}
	return str1;
}

/*---------------------------------------------------------------------------------------------------------------------------*/

public static String binary(int decimal)
{
	StringBuilder sb=new StringBuilder("");
	  while(decimal>0)
	  {
		  if(decimal%2==0)
		  {
			  sb.append(decimal%2);
			  decimal=decimal/2;
		  }else
		  {
			  sb.append(decimal%2);
		  		decimal=decimal/2;
		  }
	  }	
	  sb.reverse();
	  int len=sb.length();
	  StringBuilder sb2=new StringBuilder("");
	  for(int i=0;i<32-len;i++)
	  {
		  sb2.append('0');
	  }
	  return (sb2.append(sb).toString());
}
public static int  toSwapNibbles(int decimal)
{
	return ((decimal & 0x0F)<<4 | (decimal &0xF0)>>4);
}
public static int decimal(String binary)
{
	StringBuilder sb=new StringBuilder(binary);
	sb.reverse();
	int len =sb.length();
	int i=0;
	int res=0;
	int pow=1;
	while(i<len)
	{
		if(i==0)
		{
			pow=1;
		}else
		{
			pow=pow*2;
		}
		if((sb.charAt(i))=='1')
		{
			res=res+pow;
		}
		i++;
	}
	return res;
}

public static boolean power(int decimal)
{
	int pow=1;
	boolean flag=false;
	while(pow<=decimal)
	{
		pow=pow*2;
		if(pow==decimal)
		{
			flag=true;
			break;
		}
	}
	if(flag)
	{
		return true;
	}else {
		return false;
	}
}

/*--------------------------------------------------------------------------------------------------------------------------*/
public static void find(int l,int n)
{
	if(l==n)
	{
		System.out.println(""+n);
	}
	else
	{
	int mid=l+(n-l)/2;
	System.out.println(l+"-"+mid);
	
	System.out.println(mid+1+"-"+n);
	System.out.println("chose choise");
	int choice=Utility.readInt();
	switch(choice)
	{
	case 1: 
			find(l,mid);
	break;
	case 2: find(mid+1,n);
	break;
	default: System.out.println("Invalid choise");
	}
}
}

/*-------------------------------------DATA STRUCTURE-----------------------------------------------------------------------*/

public static String[] createFiles(String filename,String data)
{
	File myfile = new File(filename);
	String words[]=null;
	try {
		
			boolean createFile = myfile.createNewFile();
			if(createFile)
			{
				System.out.println("New File Successfully created");
			}else {
			
				
				FileWriter fw = new FileWriter("ulist.txt");
				fw.write(data);
				
				fw.close();
				
	
				FileReader fr = new FileReader(filename);
			
				BufferedReader br =  new BufferedReader(fr);
				
			
				String s;
			
			
				while((s=br.readLine())!=null)
				{
					words=s.split(",");
				}
				br.close();
			}
	}catch (Exception e)
	{
	
	}
	return words;
}


public static  node head;


/**
 * purpose class represent a node which is use to create number of nodes with next node reference.
 *
 * @param <T>
 */
public static class  node<T>
{
	T data;
	node next;
	/**
	 * purpose create node with the reference null.
	 * @param linked list data.
	 */
	public node(T x)
	{
		data=x;
		next=null;
	}
}

/**
 * purpose -These method insert a node at the next node of the reference.
 * @param <T>
 * @param x is the data.
 */
public static <T> void add(T x)
{
	node new_node=new node(x);
	new_node.next=null;
	if(head==null)
	{
		head=new_node;
	}
	else
	{
		node temp=head;
		while(temp.next!=null)
		{
			temp=temp.next;
		}
		temp.next=new_node;
	}
}

/**
 * purpose-These method checks the list is empty or not. 
 * @return boolean expression.
 */
public static boolean isEmpty()
{
	if(head==null)
	{
		return false;
	}
	else
	{
		return true;
	}
}

/**
 * purpose of these method is to search element which is present in the list or not.
 * @param <T>
 * @param x is the element to be searching.
 * @return the boolean expression.
 */
public static <T> boolean search(T x)
{
	node temp=head;
	while(temp!=null)
	{
		if(temp.data.equals(x))
		{
			return true;
		}
		temp=temp.next;
	}
	return false;
}

/**
 * purpose of these method to find the length of the list.
 * @param <T>
 * @return length.
 */
public static <T> int size()
{
	int count=0;
	node temp=head;
	while(temp!=null)
	{
		temp=temp.next;
		count++;
	}
	return count;
}


/**
 * @param <E>
 * @param x
 */
public static <E> void append(E x)
{
	node temp= new node(x);
	if(head==null)
	{
		head=temp;
	}else
	{
		node p=head;
		while(p.next!=null)
		{
			p=p.next;
		}
		p.next=temp;
	}
}

public static <T> void insertAt(int position,T x)
{
	node n=new node(x);
	node temp=head;
	for(int i=2;i<position;i++)
	{
		temp=temp.next;
	}
	n.next=temp.next;
	temp.next=n;
	
}

public static <T>  void remove(T x)
{
	node temp=head,prev=null;
	  if (temp != null && temp.data.equals(x)) 
      { 
          head = temp.next;
          return; 
      } 
	  while (temp != null && !temp.data.equals(x)) 
      { 
          prev = temp; 
          temp = temp.next; 
      }
	  if (temp == null) return; 
	 prev.next = temp.next;
}

public static <T> int index(T x)
{
	node temp=head;
	int count=1;
	while(temp!=null)
	{
		if(temp.data.equals(x))
		{
			break;
		}
		temp=temp.next;
		count++;
	}
	return count;
}

public static <T> void pop(T position)
{

	
}
public static <T> T pop()
{
	node temp=head;
	T x=null;
	if(isEmpty())
	{
		System.out.println("list is empty");
	}
	else
	{
		node temp1=head;
		node prev=temp1;
		while(temp1.next!=null)
		{
			prev=temp1;
			temp1=temp1.next;
		}
		if(prev==temp1)
		{
			head=null;
		}
		x=(T) temp1.data;
	}
	return x;
}

public static <T> void display()
{
	node temp=head;
	while(temp.next!=null)
	{
		System.out.print(temp.data+"->");
		temp=temp.next;
	}
	System.out.println(temp.data);
}

/*-------------------------------------------------------------------------------------------------*/

public static<T> void push(T x)
{
	        
}


}
